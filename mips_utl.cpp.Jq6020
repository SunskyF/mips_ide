#include "mips_utl.h"
#include <QDebug>

bool allspace(QString s){
    for (int i=0;i<s.length();++i){
        if (s[i]!=' ') return false;
    }
    return true;
}

void getTheMap(std::map<QString,int> &set_map){
    QString ir_set[55] = {"LW", "LB","LBU","LH","LHU",
                         "SW","SB","SH",
                         "ADD","ADDU","SUB","SUBU","SLT","SLTU","AND","OR","XOR","NOR","SLL","SRL","SRA",
                         "MULT","MULTU","DIV","DIVU",
                         "ADDI","ADDIU","ANDI","ORI","XORI","LUI","SLTI","SLTIU",
                         "BEQ","BNE","BLEZ","BGTZ","BLTZ","BGEZ",
                         "J","JAL","JALR","JR",
                         "MFHI","MFLO","MTHI","MTLO",
                         "ERET","MFCO","MTCO",
                         "BREAK","SYSCALL",
                         "LA","MOVE","LI"};
    for (int i=0;i<55;++i){
        set_map[ir_set[i]]=i;
    }
}

int getTheReg(QString str){
    QString regname[32]={
        "zero","at","v0","v1","a0","a1","a2","a3",
        "t0","t1","t2","t3","t4","t5","t6","t7",
        "s0","s1","s2","s3","s4","s5","s6","s7",
        "t8","t9","k0","k1","gp","sp","fp","ra"
    };
    for (int i=0;i<32;++i){
        if (regname[i]==str){
            return i;
        }
    }
    return -1;
}
QString getTheBin(int num,int dig){
    QString bincode;
    while (dig){
        int temp=dig%2;
        if (temp)
            bincode+='1';
        else bincode+='0';
        dig/=2;
    }
    QString temp;
    for (int i=bincode.size()-1;i>=0;--i){
        temp+=bincode[i];
    }
    QString res(num-bincode.size(),'0');
    res+=temp;
    return res;
}

QString bin2hex(QString str){
    QString hex="0123456789ABCDEF";
    QString res;
    int sum=0;
    for (int i=0;i<str.size();++i){
        if (i!=0&&i%4==0){
            res+=hex[sum];
            sum=0;
        }
        QString temp=str.at(i);
        sum=sum*2+temp.toInt();
    }
    res+=hex[sum];
    qDebug()<<res;
    return res;
}

QString sfunc(int inst,QString str){
    int opcode;
    int offset;
    int rs;
    int rt;
    switch (inst) {
    case 0:
        opcode=0x23;
        break;
    case 1:
        opcode=0x20;
        break;
    case 2:
        opcode=0x24;
        break;
    case 3:
        opcode=0x21;
        break;
    case 4:
        opcode=0x25;
        break;
    default:
        break;
    }
    QRegExp rx("(\\d*)\\(\\$(\\w*)\\)");
    int pos = rx.indexIn(str);
    if (pos>-1){
        offset=rx.cap(1).toInt();
        rs=getTheReg(rx.cap(2));
    }
    rx.setPattern("\\$(\\w*)");
    rx.indexIn(str);
    rt=getTheReg(rx.cap(1));
    QString bin;
    bin+=getTheBin(6,opcode);
    bin+=getTheBin(5,rs);
    bin+=getTheBin(5,rt);
    bin+=getTheBin(16,offset);
    return bin;
}

QString lfunc(int inst,QString str){
    int opcode;
    int offset;
    int rs;
    int rt;
    switch (inst) {
    case 6:
        opcode=0x2b;
        break;
    case 7:
        opcode=0x28;
        break;
    case 8:
        opcode=0x29;
        break;
    default:
        break;
    }
    QRegExp rx("(\\d*)\\(\\$(\\w*)\\)");
    int pos = rx.indexIn(str);
    if (pos>-1){
        offset=rx.cap(1).toInt();
        rt=getTheReg(rx.cap(2));
    }
    rx.setPattern("\\$(\\w*)");
    rx.indexIn(str);
    rs=getTheReg(rx.cap(1));
    QString bin;

    return bin;
}

QString alurfunc(int inst,QString str){
    int opcode=0;
    int func;
    int offset;
    int rs;
    int rt;
    switch (inst) {
    case 9:
        func=0x20;
        break;
    case 10:
        func=0x21;
        break;
    case 11:
        func=0x22;
        break;
    case 12:
        func=0x23;
        break;
    case 13:
        func=0x2a;
        break;
    case 14:
        func=0x2b;
        break;
    case 15:
        func=0x24;
        break;
    case 16:
        func=0x25;
        break;
    case 17:
        func=0x26;
        break;
    case 18:
        func=0x27;
        break;
    case 19:
        func=0x0;
        break;
    case 20:
        func=0x2;
        break;
    case 21:
        func=0x3;
        break;
    default:
        break;
    }
}

QString muldivfunc(int inst,QString str){

}

QString aluifunc(int inst,QString str){

}

QString branchfunc(int inst,QString str){

}

QString transfunc(int inst,QString str){

}

QString trfunc(int inst,QString str){

}

QString pfunc(int inst,QString str){

}

QString trapfunc(int inst,QString str){

}

QString pesfunc(int inst,QString str){

}
